name: terraform-restate

on:
  workflow_call:
    inputs:
      container_image:
        description: 'Container image name'
        type: string
        required: true
      configuration:
        description: 'Name of the configuration'
        type: string
        required: true
      environment:
        description: 'Configuration Environment, should be the same for both the backend and GitHub environment'
        type: string
        required: true
      arm_use_oidc:
        description: 'Use OIDC for Azure authentication'
        type: boolean
        default: false
        required: false
    secrets:
      ARM_CLIENT_ID:
        description: 'Azure Service Principal Client ID'
        required: false
      ARM_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID'
        required: false
      ARM_TENANT_ID:
        description: 'Azure Tenant ID'
        required: false
      ARM_CLIENT_SECRET:
        description: 'Azure Service Principal Client Secret'
        required: false

defaults:
  run:
    shell: bash

jobs:
  delete-state:
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment }}
    container:
      image: ${{ inputs.container_image }}

    env:
      ARM_USE_OIDC: ${{ inputs.arm_use_oidc }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        if: env.ARM_CLIENT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' && env.ARM_TENANT_ID != ''
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Terraform init
        run: |
          terraform -chdir=terraform/configurations/${{ inputs.configuration }} init -backend-config=env/${{ inputs.environment }}.tfbackend -reconfigure

      - name: Delete Terraform statefile
        run: |
          # locate the backend type from the configuration
          backend_type=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.type')

          # if backend is local, locate it in the backend config and delete it
          if [ "$backend_type" = "local" ]; then
            state_file=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.config.path')
            echo "Deleting local state file: $state_file"
            rm -f "$state_file"
          fi

          # if backend is azurerm, locate it in the backend config and delete it
          if [ "$backend_type" = "azurerm" ]; then
            resource_group=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.config.resource_group_name')
            storage_account=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.config.storage_account_name')
            container_name=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.config.container_name')
            state_file=$(terraform -chdir=terraform/configurations/${{ inputs.configuration }} show -json | jq -r '.backend.config.key')

            echo "Deleting Azure Storage Blob: $state_file in $container_name of $storage_account in $resource_group"
            az storage blob delete --account-name "$storage_account" --container-name "$container_name" --name "$state_file" --auth-mode login --only-show-errors
          fi


  terraform-import:
    needs: delete-state
    runs-on: ubuntu-24.04
    container:
      image: ${{ inputs.container_image }}

    env:
      ARM_USE_OIDC: ${{ inputs.arm_use_oidc }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform init
        run: |
          terraform -chdir=terraform/configurations/${{ inputs.configuration }} init -backend-config=env/${{ inputs.environment }}.tfbackend -reconfigure

      - name: Terraform import
        continue-on-error: true
        run: |
          # unhide the imports file temporarily for import-specific task
          mv terraform/configurations/${{ inputs.configuration }}/.imports.tf terraform/configurations/${{ inputs.configuration }}/imports.tf
          terraform -chdir=terraform/configurations/${{ inputs.configuration }} refresh -var-file=env/${{ inputs.environment }}.tfvars || true
          mv terraform/configurations/${{ inputs.configuration }}/imports.tf terraform/configurations/${{ inputs.configuration }}/.imports.tf
